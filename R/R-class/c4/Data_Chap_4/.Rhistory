install.packages("parallel")
library(R2SWF)
if (capabilities("cairo")) {
olddir = setwd(tempdir())
svg("Rplot%03d.svg", onefile = FALSE)
set.seed(123)
x = rnorm(5)
y = rnorm(5)
for (i in 1:100) {
plot(x <- x + 0.1 * rnorm(5), y <- y + 0.1 * rnorm(5), xlim = c(-3,
3), ylim = c(-3, 3), col = "steelblue", pch = 16, cex = 2, xlab = "x",
ylab = "y")
}
dev.off()
output = svg2swf(sprintf("Rplot%03d.svg", 1:100), interval = 0.1)
swf2html(output)
setwd(olddir)
}
library(ggmap)
library(mapproj)
map <- get_map(location = 'China', zoom = 4)
ggmap(map)
map <- get_map(location = 'Beijing', zoom = 10, maptype = 'roadmap')
ggmap(map)
install.packages("knitr")
install.packages("R2SWF")
install.packages("ggmap")
install.packages("mapproj")
install.packages("animation")
install.packages("maps")
dir(getwd())
memory.size()
memory.limit()
ls()
ls(getwd)
help(ls)
x<-1
ls
ls()
objects()
object.size()
object.size(x)
calling objects("package:base")
objects("package:base")
search()
help(rm)
history(#)
help(history)
6
help("history")
history(4)
library()
search('')
search()
library(knitr)
search()
help("help.start")
help.start
help.start()
help(rep)
rep(1:4,2)
pmin(c(1,2,3),c(2,3))
pmin(c(1,2,3),c(2,3,4))
nlm(function(x) return(x^2-sin(x)),8)
help(nlm)
rep
help(rep)
help("cbind")
help(runif)
runif(20)
summary(x)
x <- runif(20)
summary(x)
hist(x)
install.packages("ggpolt")
install.packages("ggplot")
library(ggplot2)
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
# Cholesky Factorization
system.time (C <- chol(B))
# Singular Value Decomposition
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (S <- svd (A,nu=0,nv=0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (P <- prcomp(A))
# Linear Discriminant Analysis
library('MASS')
g <- 5
k <- round (m/2)
A <- data.frame (A, fac=sample (LETTERS[1:g],m,replace=TRUE))
train <- sample(1:m, k)
system.time (L <- lda(fac ~., data=A, prior=rep(1,g)/g, subset=train))
.libPaths()
plot
install.packages("stringr")
library(stringr)
str_extract_all(string = c("regular.expressions\n","\n"), pattern =".")
test_vector2<-c("AlphaGo实在厉害！","alphago是啥","阿尔法狗是一条很凶猛的狗。") str_extract_all(string = test_vector2, pattern ="AlphaGo|阿尔法狗")
test_vector2<-c("AlphaGo实在厉害！","alphago是啥","阿尔法狗是一条很凶猛的狗。")
str_extract_all(string = test_vector2, pattern ="AlphaGo|阿尔法狗")
str_extract_all(string = c("abc","ac","bc"),pattern = "ab?c")
str_extract_all(string = c("abababab","abc","ac"),pattern = "(ab)*")
str_extract_all(string = c("abababa","abc","acb"),pattern = "(ab)*")
str_extract_all(string = c("ababcaba","abc","ab"),pattern = "(ab)*")
str_extract_all(string = c("ababcabab","abc","ac"),pattern = "(ab)+")
str_extract_all(string = c("ababcaba","abc","ab"),pattern = "(ab)+")
str_extract_all(string = c("abababab","ababc","abc"),pattern = "(ab){2,3}")
str_extract_all(string = c("abababab","ababc","abc"),pattern = "(ab){2,4}")
str_extract_all(string = c("ababababab","ababc","abc"),pattern = "(ab){2,4}")
str_extract_all(string = c("ababababab","ababc","abc"),pattern = "(ab){2,3}")
str_extract_all(string = c("abababab","ababc","abc"),pattern = "(ab){2,4}")
str_extract_all(string = c("ababcabab","ababc","abc"),pattern = "(ab){2,4}")
strsplit(x="strsplit.aslo.uses.regular.expressions", split=".")
strsplit(x="strsplit.aslo.uses.regular.expressions", split="\\.")
strsplit(x="strsplit.aslo.uses./nregular.expressions", split=".")
strsplit(x="strsplit.aslo.uses.\nregular.expressions", split=".")
strsplit(x="strsplit.aslo.uses.\n.regular.expressions", split=".")
strsplit(x="s\n.trsplit.aslo.uses.regular.expressions", split=".")
x<- c("I love R","I'm fascinated by Statisitcs")
View(x)
nchar(x)
str_count(x,pattern = "")
str_length(x)
DNA <- "AgCTaaGGGcctTagct
DNA <- "AgCTaaGGGcctTagct"
tolower(DNA)
chartr("T", "U", DNA)
install.packages("checkenc")
install.packages("checkenc")
help(checkenc)
help("checkenc)
help("checkenc")
install.packages("dplyr")
library(dplyr)
url <-'http://movie.douban.com/top250?format=text'
web <- readLines(url,encoding="UTF-8")
name<-str_extract_all(string = web, pattern = '<span class="title">.+</span>')
View(name)
head(name)
movie.names_line <- unlist(name)
head(movie.names_line)
movie.names <- str_extract(string = movie.names_line, pattern = ">[^&].+<") %>% str_replace_all(string = ., pattern = ">|<",replacement = "")
movie.names<- na.omit(movie.names)
paste("control",1:3,sep = "_")
paste("control","_")
text <- "I love R.\nI'm fascinated by Statisitcs."
cat(text)
help("cat")
strsplit(text,split = " ")
strsplit(text,split = "\\s")
strsplit(text,split = "\s")
strsplit(text,split = \s)
strsplit(text,split = "\\s")
x<- c("I love R","I'm fascinated by Statisitcs","I")
x<- c("I love R","I'm fascinated by Statisitcs","I")
grep(pattern = "love",x = x)
grep(pattern = "love",x = x,value = TRUE
grep(pattern = "love",x = x,value = TRUE)
grepl(pattern = "love",x = x)
str_detect(string = x, pattern = "love")
match(x = "I",table = x)
test_vector3<-c("Without the vowels,We can still read the word.")
sub(pattern = "[aeiou]",replacement = "-",x = test_vector3)
gsub(pattern = "[aeiou]",replacement = "-",x = test_vector3)
str_replace_all(string = test_vector3,pattern = "[aeiou]",replacement = "")
substr("abcdef", start = 2, stop = 4)
substring("abcdef", first = 1:6, last = 1:6)
str_sub("abcdef",start = 2, end = 4)
str_sub("abcdef",start = 1:6, end = 1:6)
text_weibo<- c("#围棋人机大战# 【人工智能攻克围棋 AlphaGo三比零完胜李世石】","谷歌人工智 能AlphaGo与韩国棋手李世石今日进行了第三场较量","最终AlphaGo战胜李世石，连续取得三场胜 利。接下来两场将沦为李世石的“荣誉之战。")
str_match_all(text_weibo,pattern = "#.+#")
str_match_all(text_weibo, pattern = "[a-zA-Z]+")
strtrim(c("abcde", "abcde", "abcde"),width =  c(1, 5, 10))
str_pad(string = c("abcde", "abcde", "abcde"),width =  c(1, 5, 10),side = "right")
string <- "Each character string in the input is first split into\n paragraphs (or lines containing whitespace only). The paragraphs are then formatted by breaking lines at word boundaries."
strwrap(x = string, width = 30
strwrap(x = string, width = 30)
cat(str_wrap(string = string, width = 30))
help(sapply)
x <- list(1,2,3,4,5,6,7,8,9)
head(x)
y <- sapply(x,x-1)
y <- sapply(x,mean)
y
y <- sapply(x,x <- x-1)
y <- sapply(x,[x-1])
y <- sapply(x,x[-1])
y <- sapply(x,x[]-1)
y <- sapply(x,FUN=function(x) x-1)
y
install.packages("jiebaR")
library("jiebaR")
keys = worker("keywords", topn = 1)
keys <= "我爱北京天安门"
keys <= "一个文件路径.txt"
install.packages("tm")
setwd("~/soe/R/Data_Chap_4")
grade <- as.factor(c("grade1","grade2"))
if (!is.factor(grade)) {
grade <- as.factor(grade)
}
else {
print("Grade already is a factor")
}
x <- matrix(1:6, 2, 3)
ifelse(x >= 0, sqrt(x), NA)
ccc <- c("b","QQ","a","A","bb")
for(ch in ccc)
cat(ch,":",switch(EXPR = ch,a=1,b=2:3),"\n")
#eg1
"%g%" <- function(x,y) { #“”里面是function的名字
print(x+y)
print(x-y)
print(x*y)
print(x/y) } #{}内是程序体
3%g%5
columnmean <- function(y){
nc <- ncol(y) #ncol取y的列数入nc
means <- numeric(nc) #建立means为数值型变量，数值带入nc的
for(i in 1:nc){ #对1到nc列循环
means[i] <- mean(y[,i]) means的第i项存入y的第i列的均值
}
means #输出最后结果
}
columnmean(airquality)#用airquality实验
columnmean <- function(y){
nc <- ncol(y)
#ncol取y的列数入nc
means <- numeric(nc)
#建立means为数值型变量，数值带入nc的
for(i in 1:nc){
#对1到nc列循环
means[i] <- mean(y[,i])
#means的第i项存入y的第i列的均值
}
means
#输出最后结果
}
columnmean(airquality)
columnmean <- function(y,removeNA=TRUE){
######输入的时候可以写（y，removeNA=FALSE，改变处理方式）
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA)
#把输入的removeNA的值带入mean函数的参数na.rm中，
#如果是true则去掉na，flase的话不去掉na
}
means
}
columnmean(airquality)
columnmean <- function(y,removeNA=TRUE){
######输入的时候可以写（y，removeNA=FALSE，改变处理方式）
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA)
#把输入的removeNA的值带入mean函数的参数na.rm中，
#如果是true则去掉na，flase的话不去掉na
}
means
}
columnmean(airquality,removeNA = FALSE)
help(rnorm)
help("switch")
x <- c(1,9,2,8,3,7)
y <- c(9,2,8,3,7,2)
parboth <- function (a,b) {
c <- pmax(a,b)
d <- pmin(a,b)
answer <- list(median(c),median(d))
names(answer)[[1]] <- "median of the parallel maxima"
names(answer)[[2]] <- "median of the parallel minima"
return(answer)
}
parboth(x,y)
parmax <- function (a,b){
c <- pmax(a,b)
median(c) #直接输出median
}
parmax(x,y)
help(T)
Tteset
help(switch)
is.integer(2)
isInt<-function(n){
if(mode(n)=="numeric")
{
if(n%%1==0) return(TRUE)
else return(FALSE)
}
else return(FALSE)
}
isInt(3)
isInt(3.1)
1!=1
